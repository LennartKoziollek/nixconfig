* Emacs Configuration

** Package as package manager
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Non linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Base Options
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (setq visibile-bell t)
  (setq ring-bell-function 'ignore)
  (setq make-backup-files nil)

  (menu-bar-mode -1)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (load-theme 'wombat)
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-leader-mode)
    (evil-mode 1)

    (evil-set-undo-system #'undo-redo)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-set-leader 'nil (kbd "C-SPC"))
    (evil-set-leader 'normal (kbd "SPC")))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-leader)
#+end_src

** Ivy as Completion Engine
#+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-alt-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (evil-define-key 'normal 'global (kbd "<leader>fb") 'counsel-switch-buffer))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which Key and Help Pages
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Theming

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-gruvbox t))
#+end_src

** Hydra
#+begin_src emacs-lisp
(use-package hydra)
(defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src

** Projectile
#+begin_src emacs-lisp
    (use-package projectile
	:diminish projectile-mode
	:config
	(projectile-mode)
	(evil-define-key 'normal 'global (kbd "<leader>ff") 'projectile-find-file)
	(evil-define-key 'normal 'global (kbd "<leader>fp") 'projectile-switch-project)
	(evil-define-key 'normal 'global (kbd "<leader>fs") 'projectile-switch-project)
	:custom ((projectile-completion-system 'ivy))
	:bind-keymap
	("C-c p" . projectile-command-map)
	:init
	(when (file-directory-p "~/OneDrive/repos")
	(setq projectile-project-search-path '("~/OneDrive/repos")))
	(setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
	:config (counsel-projectile-mode))

    ;(rune/leader-keys
    ;    "p" '(projectile-command-map :which-key "project"))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :config
    (evil-define-key 'normal 'global (kbd "<leader>gg") 'magit))

#+end_src

* LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "SPC l")
    :config
    (evil-define-key 'normal 'global (kbd "<leader>l") lsp-command-map)
    (lsp-enable-which-key-integration t))
    ;(evil-define-minor-mode-key 'normal lsp-mode (kbd "<leader>l") lsp-command-map))

  (use-package company
    :init (company-mode))
#+end_src

** Nix LSP

nidx is the currently best developed LSP for nix files.
Maybe when the ekala atom modules drop we get something better...

WARN: This uses nil currently. This should be changed
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'"
    :hook (nix-mode . lsp-deferred))
#+end_src

** Rust LSP

#+begin_src emacs-lisp
  (use-package rust-mode
    :hook (rust-mode . lsp-deferred)
    :init
    (setq rust-mode-treesitter-derive t)
    (setq rust-indent-offset 1))
#+end_src
